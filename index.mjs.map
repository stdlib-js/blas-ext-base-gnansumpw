{"version":3,"file":"index.mjs","sources":["../lib/accessors.js","../lib/ndarray.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @returns {number} sum\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = gnansumpw( 4, arraylike2object( x ), 2, 1 );\n* // returns 5.0\n*/\nfunction gnansumpw( N, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar xget;\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar v;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache reference to the element accessors:\n\txget = x.accessors[ 0 ];\n\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tv = xget( xbuf, ix );\n\t\tif ( isnan( v ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn N * v;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tv = xget( xbuf, ix );\n\t\t\tif ( isnan( v ) === false ) {\n\t\t\t\ts += v;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\tv = xget( xbuf, ix );\n\t\ts0 = ( isnan( v ) ) ? 0.0 : v;\n\t\tix += strideX;\n\t\tv = xget( xbuf, ix );\n\t\ts1 = ( isnan( v ) ) ? 0.0 : v;\n\t\tix += strideX;\n\t\tv = xget( xbuf, ix );\n\t\ts2 = ( isnan( v ) ) ? 0.0 : v;\n\t\tix += strideX;\n\t\tv = xget( xbuf, ix );\n\t\ts3 = ( isnan( v ) ) ? 0.0 : v;\n\t\tix += strideX;\n\t\tv = xget( xbuf, ix );\n\t\ts4 = ( isnan( v ) ) ? 0.0 : v;\n\t\tix += strideX;\n\t\tv = xget( xbuf, ix );\n\t\ts5 = ( isnan( v ) ) ? 0.0 : v;\n\t\tix += strideX;\n\t\tv = xget( xbuf, ix );\n\t\ts6 = ( isnan( v ) ) ? 0.0 : v;\n\t\tix += strideX;\n\t\tv = xget( xbuf, ix );\n\t\ts7 = ( isnan( v ) ) ? 0.0 : v;\n\t\tix += strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\tv = xget( xbuf, ix );\n\t\t\ts0 += ( isnan( v ) ) ? 0.0 : v;\n\t\t\tix += strideX;\n\t\t\tv = xget( xbuf, ix );\n\t\t\ts1 += ( isnan( v ) ) ? 0.0 : v;\n\t\t\tix += strideX;\n\t\t\tv = xget( xbuf, ix );\n\t\t\ts2 += ( isnan( v ) ) ? 0.0 : v;\n\t\t\tix += strideX;\n\t\t\tv = xget( xbuf, ix );\n\t\t\ts3 += ( isnan( v ) ) ? 0.0 : v;\n\t\t\tix += strideX;\n\t\t\tv = xget( xbuf, ix );\n\t\t\ts4 += ( isnan( v ) ) ? 0.0 : v;\n\t\t\tix += strideX;\n\t\t\tv = xget( xbuf, ix );\n\t\t\ts5 += ( isnan( v ) ) ? 0.0 : v;\n\t\t\tix += strideX;\n\t\t\tv = xget( xbuf, ix );\n\t\t\ts6 += ( isnan( v ) ) ? 0.0 : v;\n\t\t\tix += strideX;\n\t\t\tv = xget( xbuf, ix );\n\t\t\ts7 += ( isnan( v ) ) ? 0.0 : v;\n\t\t\tix += strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3) ) + ( (s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tv = xget( xbuf, ix );\n\t\t\tif ( isnan( v ) === false ) {\n\t\t\t\ts += v;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn gnansumpw( n, x, strideX, ix ) + gnansumpw( N-n, x, strideX, ix+(n*strideX) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default gnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport floor from '@stdlib/math-base-special-floor';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gnansumpw( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gnansumpw( N, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar o;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, o, strideX, offsetX );\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn N * x[ ix ];\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts1 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts2 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts3 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts4 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts5 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts6 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts7 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts1 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts2 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts3 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts4 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts5 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts6 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts7 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3) ) + ( (s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn gnansumpw( n, x, strideX, ix ) + gnansumpw( N-n, x, strideX, ix+(n*strideX) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default gnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = gnansumpw( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction gnansumpw( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* @module @stdlib/blas-ext-base-gnansumpw\n*\n* @example\n* import gnansumpw from '@stdlib/blas-ext-base-gnansumpw';\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = gnansumpw( x.length, x, 1 );\n* // returns 1.0\n*\n* @example\n* import gnansumpw from '@stdlib/blas-ext-base-gnansumpw';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n*\n* var v = gnansumpw.ndarray( 5, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["BLOCKSIZE","gnansumpw","N","x","strideX","offsetX","xbuf","xget","ix","s0","s1","s2","s3","s4","s5","s6","s7","M","s","n","v","i","data","accessors","isnan","floor","o","arraylike2object","accessorProtocol","ndarray","stride2offset","setReadOnly","main"],"mappings":"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"}