{
  "version": 3,
  "sources": ["../lib/accessors.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar floor = require( '@stdlib/math-base-special-floor' );\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783\u201399. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @returns {number} sum\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = gnansumpw( 4, arraylike2object( x ), 2, 1 );\n* // returns 5.0\n*/\nfunction gnansumpw( N, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar xget;\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar v;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache reference to the element accessors:\n\txget = x.accessors[ 0 ];\n\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tv = xget( xbuf, ix );\n\t\tif ( isnan( v ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn N * v;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tv = xget( xbuf, ix );\n\t\t\tif ( isnan( v ) === false ) {\n\t\t\t\ts += v;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\tv = xget( xbuf, ix );\n\t\ts0 = ( isnan( v ) ) ? 0.0 : v;\n\t\tix += strideX;\n\t\tv = xget( xbuf, ix );\n\t\ts1 = ( isnan( v ) ) ? 0.0 : v;\n\t\tix += strideX;\n\t\tv = xget( xbuf, ix );\n\t\ts2 = ( isnan( v ) ) ? 0.0 : v;\n\t\tix += strideX;\n\t\tv = xget( xbuf, ix );\n\t\ts3 = ( isnan( v ) ) ? 0.0 : v;\n\t\tix += strideX;\n\t\tv = xget( xbuf, ix );\n\t\ts4 = ( isnan( v ) ) ? 0.0 : v;\n\t\tix += strideX;\n\t\tv = xget( xbuf, ix );\n\t\ts5 = ( isnan( v ) ) ? 0.0 : v;\n\t\tix += strideX;\n\t\tv = xget( xbuf, ix );\n\t\ts6 = ( isnan( v ) ) ? 0.0 : v;\n\t\tix += strideX;\n\t\tv = xget( xbuf, ix );\n\t\ts7 = ( isnan( v ) ) ? 0.0 : v;\n\t\tix += strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\tv = xget( xbuf, ix );\n\t\t\ts0 += ( isnan( v ) ) ? 0.0 : v;\n\t\t\tix += strideX;\n\t\t\tv = xget( xbuf, ix );\n\t\t\ts1 += ( isnan( v ) ) ? 0.0 : v;\n\t\t\tix += strideX;\n\t\t\tv = xget( xbuf, ix );\n\t\t\ts2 += ( isnan( v ) ) ? 0.0 : v;\n\t\t\tix += strideX;\n\t\t\tv = xget( xbuf, ix );\n\t\t\ts3 += ( isnan( v ) ) ? 0.0 : v;\n\t\t\tix += strideX;\n\t\t\tv = xget( xbuf, ix );\n\t\t\ts4 += ( isnan( v ) ) ? 0.0 : v;\n\t\t\tix += strideX;\n\t\t\tv = xget( xbuf, ix );\n\t\t\ts5 += ( isnan( v ) ) ? 0.0 : v;\n\t\t\tix += strideX;\n\t\t\tv = xget( xbuf, ix );\n\t\t\ts6 += ( isnan( v ) ) ? 0.0 : v;\n\t\t\tix += strideX;\n\t\t\tv = xget( xbuf, ix );\n\t\t\ts7 += ( isnan( v ) ) ? 0.0 : v;\n\t\t\tix += strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3) ) + ( (s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tv = xget( xbuf, ix );\n\t\t\tif ( isnan( v ) === false ) {\n\t\t\t\ts += v;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn gnansumpw( n, x, strideX, ix ) + gnansumpw( N-n, x, strideX, ix+(n*strideX) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = gnansumpw;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar arraylike2object = require( '@stdlib/array-base-arraylike2object' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar floor = require( '@stdlib/math-base-special-floor' );\nvar accessors = require( './accessors.js' );\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783\u201399. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gnansumpw( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gnansumpw( N, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar o;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, o, strideX, offsetX );\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn N * x[ ix ];\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts1 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts2 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts3 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts4 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts5 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts6 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\t\ts7 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts1 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts2 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts3 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts4 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts5 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts6 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t\ts7 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3) ) + ( (s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn gnansumpw( n, x, strideX, ix ) + gnansumpw( N-n, x, strideX, ix+(n*strideX) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = gnansumpw;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783\u201399. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = gnansumpw( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction gnansumpw( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = gnansumpw;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* @module @stdlib/blas-ext-base-gnansumpw\n*\n* @example\n* var gnansumpw = require( '@stdlib/blas-ext-base-gnansumpw' );\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = gnansumpw( x.length, x, 1 );\n* // returns 1.0\n*\n* @example\n* var gnansumpw = require( '@stdlib/blas-ext-base-gnansumpw' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n*\n* var v = gnansumpw.ndarray( 5, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_accessors", "__commonJSMin", "exports", "module", "isnan", "floor", "BLOCKSIZE", "gnansumpw", "N", "x", "strideX", "offsetX", "xbuf", "xget", "ix", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "M", "s", "n", "v", "i", "require_ndarray", "__commonJSMin", "exports", "module", "arraylike2object", "isnan", "floor", "accessors", "BLOCKSIZE", "gnansumpw", "N", "x", "strideX", "offsetX", "ix", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "M", "s", "n", "o", "i", "require_main", "__commonJSMin", "exports", "module", "stride2offset", "ndarray", "gnansumpw", "N", "x", "strideX", "setReadOnly", "main", "ndarray"]
}
